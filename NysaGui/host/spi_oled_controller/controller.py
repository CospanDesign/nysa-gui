#! /usr/bin/python

# Copyright (c) 2014 Dave McCoy (dave.mccoy@cospandesign.com)

# This file is part of Nysa (wiki.cospandesign.com/index.php?title=Nysa).
#
# Nysa is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.
#
# Nysa is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Nysa; If not, see <http://www.gnu.org/licenses/>.


"""
SPI OLED Controller
"""

__author__ = 'dave.mccoy@cospandesign.com (Dave McCoy)'

import os
import sys
import argparse
import time

from array import array as Array
from nysa.host.nysa import Nysa

from PyQt4.Qt import QApplication
from PyQt4 import QtCore
from PyQt4 import QtGui

sys.path.append(os.path.join(os.path.dirname(__file__),
                             os.pardir,
                             os.pardir,
                             "common"))

from nysa_base_controller import NysaBaseController
from view.view import View
from oled_pmod import OLED

sys.path.append(os.path.join(os.path.dirname(__file__),
                             os.pardir,
                             "common"))

from standalone_controller import find_image

IMAGE_ID = 258

#Module Defines
n = str(os.path.split(__file__)[1])

DESCRIPTION = "\n" \
"\n"\
"A template app\n"

EPILOG = "\n" \
"\n"\
"Examples:\n"\
"\tSomething\n" \
"\t\t%s Something\n"\
"\n" % n

CD_IMAGE          = Array('B', [
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x00, 0x40,
0x80, 0x60, 0x10, 0x04, 0x01, 0x01, 0x08, 0x00, 0x01, 0x03, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x10, 0x10, 0x10, 0x00,
0x80, 0xC0, 0x40, 0xC0, 0x80, 0x00, 0x80, 0x40, 0x40, 0x40, 0x00, 0xC0, 0x40, 0x40, 0x40, 0x80,
0x00, 0x00, 0x40, 0x40, 0x40, 0x80, 0x00, 0xC0, 0xC0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0xF0, 0x10, 0x10, 0x30, 0x60, 0xC0, 0x00, 0x80, 0x40, 0x40, 0xC0, 0x00, 0x00, 0xC0, 0x40,
0x40, 0x00, 0x00, 0xD0, 0x00, 0x80, 0xC0, 0x40, 0x40, 0xC0, 0x00, 0x00, 0xC0, 0x40, 0x40, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xC0, 0x80, 0x00, 0x20, 0x00, 0x80, 0xC0, 0x70, 0x1C, 0x06,
0x01, 0x04, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x00,
0x07, 0x0C, 0x08, 0x0C, 0x07, 0x00, 0x09, 0x09, 0x0A, 0x0E, 0x00, 0x3F, 0x08, 0x08, 0x08, 0x07,
0x00, 0x06, 0x09, 0x09, 0x09, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0x08, 0x08, 0x0C, 0x06, 0x03, 0x00, 0x07, 0x09, 0x09, 0x09, 0x00, 0x00, 0x09, 0x09,
0x0F, 0x00, 0x00, 0x0F, 0x00, 0x07, 0x2C, 0x28, 0x28, 0x1F, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0F,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
])


FOR_RENT_IMAGE  = Array ('B', [
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0E, 0x32, 0xC0, 0x32, 0x0E, 0x02, 0x00, 0xE0,
0x10, 0x10, 0x10, 0x10, 0x10, 0xE0, 0x00, 0x10, 0xF0, 0x00, 0x00, 0x10, 0xF0, 0x00, 0x00, 0x10,
0x10, 0xF0, 0x20, 0x10, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C,
0x22, 0x22, 0x22, 0x22, 0x22, 0xC4, 0x00, 0x00, 0x10, 0x10, 0xF2, 0x00, 0x00, 0x00, 0x00, 0xE0,
0x10, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x00, 0x10, 0xF0, 0x20, 0x10, 0x10, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x22, 0x20, 0x22, 0xFE, 0x02, 0x00, 0xE0,
0x50, 0x50, 0x50, 0x50, 0x50, 0x60, 0x00, 0x10, 0x10, 0xF0, 0x20, 0x10, 0x10, 0x20, 0x00, 0xE0,
0x50, 0x50, 0x50, 0x50, 0x50, 0x60, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x02, 0x00, 0x00, 0x00, 0x01,
0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x01, 0x02, 0x02, 0x01, 0x03, 0x02, 0x00, 0x02,
0x02, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x02, 0x02, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00,
0x09, 0x09, 0x09, 0x09, 0x07, 0x00, 0x00, 0x02, 0x03, 0x02, 0x00, 0x02, 0x03, 0x02, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x02, 0x00, 0x02, 0x03, 0x02, 0x00, 0x01,
0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01,
0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
])

class Controller(NysaBaseController):

    @staticmethod
    def get_name():
        #Change this for your app
        return "SPI Oled Controller"

    def __init__(self):
        super (Controller, self).__init__()
        self.bitmap = []

    #Bitmap Functions
    def set_bitmap_image(self, image):
        self.bitmap = image

    def put_buffer(self, column_index):
        for i in range((column_index * 128), ((column_index * 128) + 128)):
            self.oled_send_command(self.bitmap[i])

    def clear_buffer(self):
        for i in range(0, self.display_size):
            self.bitmap[i] = 0x00

    def clear_screen(self):
        self.clear_buffer()
        self.oled_write_buffer()

    def draw_pixel(self, x, y, on):
        x_remain = x % 8
        x_loc = x / 8

        bit = 1 << x_remain
        y_loc = y * 16

        #print "x location: %d" % x_loc
        #print "y location: %d" % y_loc

        byte_address = y_loc + x_loc
        #print "byte address: %d" % byte_address
        if on:
            self.bitmap[byte_address] = self.bitmap[byte_address] | (bit & 0x0FF)
        else:
            self.bitmap[byte_address] = self.bitmap[byte_address] & (~(bit & 0x0FF))

    #Application Functions
    def _initialize(self, platform):
        #Get a reference to GPIO
        n = platform[2]
        self.set_bitmap_image(CD_IMAGE)
        #self.set_bitmap_image(FOR_RENT_IMAGE)
        #self.oled_write_buffer()
        #Setup View
        self.v = View(self.status, self.actions)
        self.v.setup_simple_text_output_view()
        self.oled = OLED(n, self.status)
        self.oled.write_buffer(self.bitmap)

    def start_standalone_app(self, platform, device_index, status, debug = False):
        app = QApplication (sys.argv)
        main = QtGui.QMainWindow()

        self.status = status.Status()
        if debug:
            self.status.set_level(status.StatusLevel.VERBOSE)
        else:
            self.status.set_level(status.StatusLevel.INFO)
        self.status.Verbose("Starting Standalone Application")
        self._initialize(platform)
        main.setCentralWidget(self.v)
        main.show()
        sys.exit(app.exec_())

    def start_tab_view(self, platform, status):
        self.status = status
        self.status.Verbose("Starting Template Application")
        self._initialize(platform)

    def get_view(self):
        return self.v

    @staticmethod
    def get_unique_image_id():
        return 258

    @staticmethod
    def get_device_id():
        #return Nysa.get_id_from_name(DEVICE_NAME)
        return None

    @staticmethod
    def get_device_sub_id():
        return None

    @staticmethod
    def get_device_unique_id():
        return None


def main(argv):
    platform, status, debug = find_image(argv, IMAGE_ID)
    c = Controller()
    c.start_standalone_app(platform, None, status, debug)

if __name__ == "__main__":
    main(sys.argv)

